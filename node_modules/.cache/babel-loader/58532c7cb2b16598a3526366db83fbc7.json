{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';// const getLocaleStorage = () => {\n//     let cart = localStorage.getItem('cart');\n//     if (cart) {\n//         return JSON.parse(localStorage.getItem('cart'));\n//     } else {\n//         return []\n//     }\n// };\nvar initialState={items:[],totalQuantity:0,totalPrice:0};var cartSlice=createSlice({name:'cart',initialState:initialState,reducers:{addItemsToCart:function addItemsToCart(state,action){var newItem=action.payload;var existingItem=state.items.find(function(item){return item.id===newItem.id;});newItem.price=Number(newItem.price);if(!existingItem){state.items.push(newItem);}else{existingItem.quantity+=newItem.quantity;existingItem.totalPrice+=newItem.totalPrice;}state.totalPrice+=newItem.totalPrice;state.totalQuantity+=newItem.quantity;},addItemToCart:function addItemToCart(state,action){var id=action.payload;var existingItem=state.items.find(function(item){return item.id===id;});state.totalQuantity++;existingItem.quantity++;existingItem.totalPrice+=existingItem.price;state.totalPrice+=existingItem.price;},removeItemFromCart:function removeItemFromCart(state,action){var id=action.payload;var existingItem=state.items.find(function(item){return item.id===id;});if(existingItem.quantity===1){state.items=state.items.filter(function(item){return item.id!==id;});}else{existingItem.quantity--;existingItem.totalPrice-=existingItem.price;}state.totalPrice-=existingItem.price;state.totalQuantity--;},clearCart:function clearCart(state){Object.assign(state,initialState);}}});export var cartActions=cartSlice.actions;export default cartSlice;","map":{"version":3,"sources":["C:/Users/Lenovo/Documents/node/lennitaFront/LennitaBB/src/store/cart-slice.js"],"names":["createSlice","initialState","items","totalQuantity","totalPrice","cartSlice","name","reducers","addItemsToCart","state","action","newItem","payload","existingItem","find","item","id","price","Number","push","quantity","addItemToCart","removeItemFromCart","filter","clearCart","Object","assign","cartActions","actions"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,KAAK,CAAE,EADU,CAEjBC,aAAa,CAAE,CAFE,CAGjBC,UAAU,CAAE,CAHK,CAArB,CAOA,GAAMC,CAAAA,SAAS,CAAGL,WAAW,CAAC,CAC1BM,IAAI,CAAE,MADoB,CAE1BL,YAAY,CAAZA,YAF0B,CAG1BM,QAAQ,CAAE,CACNC,cADM,yBACSC,KADT,CACgBC,MADhB,CACwB,CAC1B,GAAMC,CAAAA,OAAO,CAAGD,MAAM,CAACE,OAAvB,CACA,GAAMC,CAAAA,YAAY,CAAGJ,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAiB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,EAAL,GAAYL,OAAO,CAACK,EAA9B,EAAjB,CAArB,CACAL,OAAO,CAACM,KAAR,CAAgBC,MAAM,CAACP,OAAO,CAACM,KAAT,CAAtB,CACA,GAAI,CAACJ,YAAL,CAAmB,CACfJ,KAAK,CAACP,KAAN,CAAYiB,IAAZ,CAAiBR,OAAjB,EACH,CAFD,IAEO,CACHE,YAAY,CAACO,QAAb,EAAyBT,OAAO,CAACS,QAAjC,CACAP,YAAY,CAACT,UAAb,EAA2BO,OAAO,CAACP,UAAnC,CACH,CACDK,KAAK,CAACL,UAAN,EAAoBO,OAAO,CAACP,UAA5B,CACAK,KAAK,CAACN,aAAN,EAAuBQ,OAAO,CAACS,QAA/B,CACH,CAbK,CAcNC,aAdM,wBAcQZ,KAdR,CAceC,MAdf,CAcuB,CACzB,GAAMM,CAAAA,EAAE,CAAGN,MAAM,CAACE,OAAlB,CACA,GAAMC,CAAAA,YAAY,CAAGJ,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAiB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,EAAL,GAAYA,EAAtB,EAAjB,CAArB,CACAP,KAAK,CAACN,aAAN,GAEAU,YAAY,CAACO,QAAb,GACAP,YAAY,CAACT,UAAb,EAA2BS,YAAY,CAACI,KAAxC,CACAR,KAAK,CAACL,UAAN,EAAoBS,YAAY,CAACI,KAAjC,CAEH,CAvBK,CAwBNK,kBAxBM,6BAwBab,KAxBb,CAwBoBC,MAxBpB,CAwB4B,CAC9B,GAAMM,CAAAA,EAAE,CAAGN,MAAM,CAACE,OAAlB,CACA,GAAMC,CAAAA,YAAY,CAAGJ,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAiB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,EAAL,GAAYA,EAAtB,EAAjB,CAArB,CACA,GAAIH,YAAY,CAACO,QAAb,GAA0B,CAA9B,CAAiC,CAC7BX,KAAK,CAACP,KAAN,CAAcO,KAAK,CAACP,KAAN,CAAYqB,MAAZ,CAAmB,SAACR,IAAD,QAAUA,CAAAA,IAAI,CAACC,EAAL,GAAYA,EAAtB,EAAnB,CAAd,CACH,CAFD,IAEO,CACHH,YAAY,CAACO,QAAb,GACAP,YAAY,CAACT,UAAb,EAA2BS,YAAY,CAACI,KAAxC,CACH,CACDR,KAAK,CAACL,UAAN,EAAoBS,YAAY,CAACI,KAAjC,CACAR,KAAK,CAACN,aAAN,GACH,CAnCK,CAoCNqB,SApCM,oBAoCIf,KApCJ,CAoCW,CAEbgB,MAAM,CAACC,MAAP,CAAcjB,KAAd,CAAqBR,YAArB,EACH,CAvCK,CAHgB,CAAD,CAA7B,CAgDA,MAAO,IAAM0B,CAAAA,WAAW,CAAGtB,SAAS,CAACuB,OAA9B,CAEP,cAAevB,CAAAA,SAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n// const getLocaleStorage = () => {\r\n//     let cart = localStorage.getItem('cart');\r\n//     if (cart) {\r\n//         return JSON.parse(localStorage.getItem('cart'));\r\n//     } else {\r\n//         return []\r\n//     }\r\n// };\r\n\r\nconst initialState = {\r\n    items: [],\r\n    totalQuantity: 0,\r\n    totalPrice: 0\r\n};\r\n\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        addItemsToCart(state, action) {\r\n            const newItem = action.payload;\r\n            const existingItem = state.items.find((item) => item.id === newItem.id);\r\n            newItem.price = Number(newItem.price);\r\n            if (!existingItem) {\r\n                state.items.push(newItem);\r\n            } else {\r\n                existingItem.quantity += newItem.quantity;\r\n                existingItem.totalPrice += newItem.totalPrice;\r\n            }\r\n            state.totalPrice += newItem.totalPrice;\r\n            state.totalQuantity += newItem.quantity;\r\n        },\r\n        addItemToCart(state, action) {\r\n            const id = action.payload;\r\n            const existingItem = state.items.find((item) => item.id === id);\r\n            state.totalQuantity++;\r\n\r\n            existingItem.quantity++;\r\n            existingItem.totalPrice += existingItem.price;\r\n            state.totalPrice += existingItem.price;\r\n            \r\n        },\r\n        removeItemFromCart(state, action) {\r\n            const id = action.payload;\r\n            const existingItem = state.items.find((item) => item.id === id);\r\n            if (existingItem.quantity === 1) {\r\n                state.items = state.items.filter((item) => item.id !== id);\r\n            } else {\r\n                existingItem.quantity--;\r\n                existingItem.totalPrice -= existingItem.price;\r\n            }\r\n            state.totalPrice -= existingItem.price;\r\n            state.totalQuantity--;\r\n        },\r\n        clearCart(state) {\r\n            \r\n            Object.assign(state, initialState);\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}